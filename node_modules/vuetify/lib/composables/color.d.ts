import type { CSSProperties, Ref } from 'vue';
type ColorValue = string | false | null | undefined;
export interface TextColorData {
    textColorClasses: Ref<string[]>;
    textColorStyles: Ref<CSSProperties>;
}
export interface BackgroundColorData {
    backgroundColorClasses: Ref<string[]>;
    backgroundColorStyles: Ref<CSSProperties>;
}
export declare function useColor(colors: Ref<{
    background?: ColorValue;
    text?: ColorValue;
}>): import("vue").ToRefs<{
    colorClasses: string[];
    colorStyles: CSSProperties;
}>;
export declare function useTextColor(color: Ref<ColorValue>): TextColorData;
export declare function useTextColor<T extends Record<K, ColorValue>, K extends string>(props: T, name: K): TextColorData;
export declare function useBackgroundColor(color: Ref<ColorValue>): BackgroundColorData;
export declare function useBackgroundColor<T extends Record<K, ColorValue>, K extends string>(props: T, name: K): BackgroundColorData;

